rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Funciones auxiliares
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Validar campos requeridos del perfil
    function isValidProfile(profile) {
      return profile.size() > 0 
        && 'email' in profile 
        && 'displayName' in profile
        && 'createdAt' in profile;
    }

    // Reglas para perfiles de usuario
    match /users/{userId} {
      // Lectura: cualquier usuario autenticado puede ver perfiles
      allow read: if isAuthenticated();
      
      // Creaci칩n/Actualizaci칩n: solo el propio usuario puede modificar su perfil
      allow create: if isOwner(userId) 
                   && isValidProfile(request.resource.data)
                   && request.resource.data.email == request.auth.token.email;
      
      allow update: if isOwner(userId)
                   && isValidProfile(request.resource.data)
                   && request.resource.data.email == resource.data.email;
      
      // Eliminaci칩n: solo el propio usuario puede eliminar su perfil
      allow delete: if isOwner(userId);
    }

    // Reglas para rutas
    match /routes/{routeId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() 
                   && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isAuthenticated() 
                          && resource.data.ownerId == request.auth.uid;
    }

    // Reglas para logros (achievements)
    match /achievements/{achievementId} {
      allow read: if isAuthenticated();
      allow write: if false; // Solo administrativamente
    }

    // Regla por defecto: denegar todo lo dem치s
    match /{document=**} {
      allow read, write: if false;
    }
  }
}